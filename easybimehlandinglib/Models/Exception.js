/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Exception
 *
 * @constructor
 */
angular.module('EasyBimehLandingLib')
    .factory('Exception', ['BaseModel', ExceptionModel]);

    function ExceptionModel(BaseModel) {
        var Exception = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.dateTime = this.getValue(obj.dateTime);
            this.message = this.getValue(obj.message);
            this.helpLink = this.getValue(obj.helpLink);
            this.source = this.getValue(obj.source);
            this.stackTrace = this.getValue(obj.stackTrace);
            this.targetSite = this.getValue(obj.targetSite);
            this.errorLine = this.getValue(obj.errorLine);
            this.exceptionType = this.getValue(obj.exceptionType);
            this.exceptionUrl = this.getValue(obj.exceptionUrl);
            this.innerException = this.getValue(obj.innerException);
        };

        Exception.prototype = new BaseModel();
        Exception.prototype.constructor = Exception;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Exception.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'dateTime', realName: 'dateTime' },
                { name: 'message', realName: 'message' },
                { name: 'helpLink', realName: 'helpLink' },
                { name: 'source', realName: 'source' },
                { name: 'stackTrace', realName: 'stackTrace' },
                { name: 'targetSite', realName: 'targetSite', type: 'TargetSite' },
                { name: 'errorLine', realName: 'errorLine' },
                { name: 'exceptionType', realName: 'exceptionType' },
                { name: 'exceptionUrl', realName: 'exceptionUrl' },
                { name: 'innerException', realName: 'innerException' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Exception.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Exception.prototype.getDateTime = function () {
            return this.dateTime;
        };
    
        /**
         * Setter for DateTime
         * 
         * @param {string} value 
         */
        Exception.prototype.setDateTime = function (value) {
            this.dateTime = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Exception.prototype.getMessage = function () {
            return this.message;
        };
    
        /**
         * Setter for Message
         * 
         * @param {string} value 
         */
        Exception.prototype.setMessage = function (value) {
            this.message = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Exception.prototype.getHelpLink = function () {
            return this.helpLink;
        };
    
        /**
         * Setter for HelpLink
         * 
         * @param {string|null} value 
         */
        Exception.prototype.setHelpLink = function (value) {
            this.helpLink = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Exception.prototype.getSource = function () {
            return this.source;
        };
    
        /**
         * Setter for Source
         * 
         * @param {string} value 
         */
        Exception.prototype.setSource = function (value) {
            this.source = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Exception.prototype.getStackTrace = function () {
            return this.stackTrace;
        };
    
        /**
         * Setter for StackTrace
         * 
         * @param {string} value 
         */
        Exception.prototype.setStackTrace = function (value) {
            this.stackTrace = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {TargetSite}
         */
        Exception.prototype.getTargetSite = function () {
            return this.targetSite;
        };
    
        /**
         * Setter for TargetSite
         * 
         * @param {TargetSite} value 
         */
        Exception.prototype.setTargetSite = function (value) {
            this.targetSite = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Exception.prototype.getErrorLine = function () {
            return this.errorLine;
        };
    
        /**
         * Setter for ErrorLine
         * 
         * @param {string|null} value 
         */
        Exception.prototype.setErrorLine = function (value) {
            this.errorLine = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Exception.prototype.getExceptionType = function () {
            return this.exceptionType;
        };
    
        /**
         * Setter for ExceptionType
         * 
         * @param {string} value 
         */
        Exception.prototype.setExceptionType = function (value) {
            this.exceptionType = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Exception.prototype.getExceptionUrl = function () {
            return this.exceptionUrl;
        };
    
        /**
         * Setter for ExceptionUrl
         * 
         * @param {string|null} value 
         */
        Exception.prototype.setExceptionUrl = function (value) {
            this.exceptionUrl = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Exception.prototype.getInnerException = function () {
            return this.innerException;
        };
    
        /**
         * Setter for InnerException
         * 
         * @param {string|null} value 
         */
        Exception.prototype.setInnerException = function (value) {
            this.innerException = value;
        };
    
        return Exception;
    }

}(angular));
