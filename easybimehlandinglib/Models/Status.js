/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Status
 *
 * @constructor
 */
angular.module('EasyBimehLandingLib')
    .factory('Status', ['BaseModel', StatusModel]);

    function StatusModel(BaseModel) {
        var Status = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.id = this.getValue(obj.id);
            this.entityId = this.getValue(obj.entityId);
            this.primaryEntityName = this.getValue(obj.primaryEntityName);
            this.statusCollectionId = this.getValue(obj.statusCollectionId);
            this.formData = this.getValue(obj.formData);
            this.statusTitle = this.getValue(obj.statusTitle);
            this.editable = this.getValue(obj.editable);
            this.statusCollectionParentId = this.getValue(obj.statusCollectionParentId);
        };

        Status.prototype = new BaseModel();
        Status.prototype.constructor = Status;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Status.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'id', realName: 'id' },
                { name: 'entityId', realName: 'entityId' },
                { name: 'primaryEntityName', realName: 'primaryEntityName' },
                { name: 'statusCollectionId', realName: 'statusCollectionId' },
                { name: 'formData', realName: 'formData' },
                { name: 'statusTitle', realName: 'statusTitle' },
                { name: 'editable', realName: 'editable' },
                { name: 'statusCollectionParentId', realName: 'statusCollectionParentId' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Status.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Status.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {string} value 
         */
        Status.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Status.prototype.getEntityId = function () {
            return this.entityId;
        };
    
        /**
         * Setter for EntityId
         * 
         * @param {string} value 
         */
        Status.prototype.setEntityId = function (value) {
            this.entityId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int}
         */
        Status.prototype.getPrimaryEntityName = function () {
            return this.primaryEntityName;
        };
    
        /**
         * Setter for PrimaryEntityName
         * 
         * @param {int} value 
         */
        Status.prototype.setPrimaryEntityName = function (value) {
            this.primaryEntityName = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Status.prototype.getStatusCollectionId = function () {
            return this.statusCollectionId;
        };
    
        /**
         * Setter for StatusCollectionId
         * 
         * @param {string} value 
         */
        Status.prototype.setStatusCollectionId = function (value) {
            this.statusCollectionId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Status.prototype.getFormData = function () {
            return this.formData;
        };
    
        /**
         * Setter for FormData
         * 
         * @param {string|null} value 
         */
        Status.prototype.setFormData = function (value) {
            this.formData = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Status.prototype.getStatusTitle = function () {
            return this.statusTitle;
        };
    
        /**
         * Setter for StatusTitle
         * 
         * @param {string|null} value 
         */
        Status.prototype.setStatusTitle = function (value) {
            this.statusTitle = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {bool}
         */
        Status.prototype.getEditable = function () {
            return this.editable;
        };
    
        /**
         * Setter for Editable
         * 
         * @param {bool} value 
         */
        Status.prototype.setEditable = function (value) {
            this.editable = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Status.prototype.getStatusCollectionParentId = function () {
            return this.statusCollectionParentId;
        };
    
        /**
         * Setter for StatusCollectionParentId
         * 
         * @param {string|null} value 
         */
        Status.prototype.setStatusCollectionParentId = function (value) {
            this.statusCollectionParentId = value;
        };
    
        return Status;
    }

}(angular));
