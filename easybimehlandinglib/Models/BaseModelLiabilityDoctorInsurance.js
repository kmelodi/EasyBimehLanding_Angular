/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of BaseModelLiabilityDoctorInsurance
 *
 * @constructor
 */
angular.module('EasyBimehLandingLib')
    .factory('BaseModelLiabilityDoctorInsurance', ['BaseModel', BaseModelLiabilityDoctorInsuranceModel]);

    function BaseModelLiabilityDoctorInsuranceModel(BaseModel) {
        var BaseModelLiabilityDoctorInsurance = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.isSuccess = this.getValue(obj.isSuccess);
            this.status = this.getValue(obj.status);
            this.message = this.getValue(obj.message);
            this.extraData = this.getValue(obj.extraData);
            this.exception = this.getValue(obj.exception);
        };

        BaseModelLiabilityDoctorInsurance.prototype = new BaseModel();
        BaseModelLiabilityDoctorInsurance.prototype.constructor = BaseModelLiabilityDoctorInsurance;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        BaseModelLiabilityDoctorInsurance.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'isSuccess', realName: 'isSuccess' },
                { name: 'status', realName: 'status' },
                { name: 'message', realName: 'message', type: 'LiabilityDoctorInsurance' },
                { name: 'extraData', realName: 'extraData' },
                { name: 'exception', realName: 'exception' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        BaseModelLiabilityDoctorInsurance.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {bool}
         */
        BaseModelLiabilityDoctorInsurance.prototype.getIsSuccess = function () {
            return this.isSuccess;
        };
    
        /**
         * Setter for IsSuccess
         * 
         * @param {bool} value 
         */
        BaseModelLiabilityDoctorInsurance.prototype.setIsSuccess = function (value) {
            this.isSuccess = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int}
         */
        BaseModelLiabilityDoctorInsurance.prototype.getStatus = function () {
            return this.status;
        };
    
        /**
         * Setter for Status
         * 
         * @param {int} value 
         */
        BaseModelLiabilityDoctorInsurance.prototype.setStatus = function (value) {
            this.status = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {LiabilityDoctorInsurance}
         */
        BaseModelLiabilityDoctorInsurance.prototype.getMessage = function () {
            return this.message;
        };
    
        /**
         * Setter for Message
         * 
         * @param {LiabilityDoctorInsurance} value 
         */
        BaseModelLiabilityDoctorInsurance.prototype.setMessage = function (value) {
            this.message = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        BaseModelLiabilityDoctorInsurance.prototype.getExtraData = function () {
            return this.extraData;
        };
    
        /**
         * Setter for ExtraData
         * 
         * @param {string|null} value 
         */
        BaseModelLiabilityDoctorInsurance.prototype.setExtraData = function (value) {
            this.extraData = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        BaseModelLiabilityDoctorInsurance.prototype.getException = function () {
            return this.exception;
        };
    
        /**
         * Setter for Exception
         * 
         * @param {string|null} value 
         */
        BaseModelLiabilityDoctorInsurance.prototype.setException = function (value) {
            this.exception = value;
        };
    
        return BaseModelLiabilityDoctorInsurance;
    }

}(angular));
