/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Upload
 *
 * @constructor
 */
angular.module('EasyBimehLandingLib')
    .factory('Upload', ['BaseModel', UploadModel]);

    function UploadModel(BaseModel) {
        var Upload = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.id = this.getValue(obj.id);
            this.metaMediaDirectoryId = this.getValue(obj.metaMediaDirectoryId);
            this.title = this.getValue(obj.title);
            this.alt = this.getValue(obj.alt);
            this.fileName = this.getValue(obj.fileName);
            this.passwordHash = this.getValue(obj.passwordHash);
            this.isActive = this.getValue(obj.isActive);
            this.expireOn = this.getValue(obj.expireOn);
            this.fileLibraryLabelParam = this.getValue(obj.fileLibraryLabelParam);
            this.fileSize = this.getValue(obj.fileSize);
            this.fileSizeValue = this.getValue(obj.fileSizeValue);
            this.fileUrl = this.getValue(obj.fileUrl);
            this.fileThumbnailUrl = this.getValue(obj.fileThumbnailUrl);
            this.expireOnPersianDate = this.getValue(obj.expireOnPersianDate);
            this.updateOn = this.getValue(obj.updateOn);
            this.createOn = this.getValue(obj.createOn);
            this.createOnPersianDate = this.getValue(obj.createOnPersianDate);
            this.updateOnPersianDate = this.getValue(obj.updateOnPersianDate);
            this.filePath = this.getValue(obj.filePath);
        };

        Upload.prototype = new BaseModel();
        Upload.prototype.constructor = Upload;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Upload.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'id', realName: 'id' },
                { name: 'metaMediaDirectoryId', realName: 'metaMediaDirectoryId' },
                { name: 'title', realName: 'title' },
                { name: 'alt', realName: 'alt' },
                { name: 'fileName', realName: 'fileName' },
                { name: 'passwordHash', realName: 'passwordHash' },
                { name: 'isActive', realName: 'isActive' },
                { name: 'expireOn', realName: 'expireOn' },
                { name: 'fileLibraryLabelParam', realName: 'fileLibraryLabelParam' },
                { name: 'fileSize', realName: 'fileSize' },
                { name: 'fileSizeValue', realName: 'fileSizeValue' },
                { name: 'fileUrl', realName: 'fileUrl' },
                { name: 'fileThumbnailUrl', realName: 'fileThumbnailUrl' },
                { name: 'expireOnPersianDate', realName: 'expireOnPersianDate' },
                { name: 'updateOn', realName: 'updateOn' },
                { name: 'createOn', realName: 'createOn' },
                { name: 'createOnPersianDate', realName: 'createOnPersianDate' },
                { name: 'updateOnPersianDate', realName: 'updateOnPersianDate' },
                { name: 'filePath', realName: 'filePath' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Upload.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * شناسه ی فایل
         *
         * @return {int}
         */
        Upload.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {int} value 
         */
        Upload.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * شناسه ی دایرکتوری فایل
         *
         * @return {int}
         */
        Upload.prototype.getMetaMediaDirectoryId = function () {
            return this.metaMediaDirectoryId;
        };
    
        /**
         * Setter for MetaMediaDirectoryId
         * 
         * @param {int} value 
         */
        Upload.prototype.setMetaMediaDirectoryId = function (value) {
            this.metaMediaDirectoryId = value;
        };
    
        /**
         * عنوان
         *
         * @return {string|null}
         */
        Upload.prototype.getTitle = function () {
            return this.title;
        };
    
        /**
         * Setter for Title
         * 
         * @param {string|null} value 
         */
        Upload.prototype.setTitle = function (value) {
            this.title = value;
        };
    
        /**
         * توضیح فایل
         *
         * @return {string|null}
         */
        Upload.prototype.getAlt = function () {
            return this.alt;
        };
    
        /**
         * Setter for Alt
         * 
         * @param {string|null} value 
         */
        Upload.prototype.setAlt = function (value) {
            this.alt = value;
        };
    
        /**
         * نام فایل
         *
         * @return {string}
         */
        Upload.prototype.getFileName = function () {
            return this.fileName;
        };
    
        /**
         * Setter for FileName
         * 
         * @param {string} value 
         */
        Upload.prototype.setFileName = function (value) {
            this.fileName = value;
        };
    
        /**
         * پسورد فایل
         *
         * @return {string|null}
         */
        Upload.prototype.getPasswordHash = function () {
            return this.passwordHash;
        };
    
        /**
         * Setter for PasswordHash
         * 
         * @param {string|null} value 
         */
        Upload.prototype.setPasswordHash = function (value) {
            this.passwordHash = value;
        };
    
        /**
         * وضعیت اکتیو بودن فایل
         *
         * @return {string|null}
         */
        Upload.prototype.getIsActive = function () {
            return this.isActive;
        };
    
        /**
         * Setter for IsActive
         * 
         * @param {string|null} value 
         */
        Upload.prototype.setIsActive = function (value) {
            this.isActive = value;
        };
    
        /**
         * زمان انقضای فایل
         *
         * @return {string|null}
         */
        Upload.prototype.getExpireOn = function () {
            return this.expireOn;
        };
    
        /**
         * Setter for ExpireOn
         * 
         * @param {string|null} value 
         */
        Upload.prototype.setExpireOn = function (value) {
            this.expireOn = value;
        };
    
        /**
         * لیبل دسته بندی فایل
         *
         * @return {string|null}
         */
        Upload.prototype.getFileLibraryLabelParam = function () {
            return this.fileLibraryLabelParam;
        };
    
        /**
         * Setter for FileLibraryLabelParam
         * 
         * @param {string|null} value 
         */
        Upload.prototype.setFileLibraryLabelParam = function (value) {
            this.fileLibraryLabelParam = value;
        };
    
        /**
         * اندازه ی فایل
         *
         * @return {string|null}
         */
        Upload.prototype.getFileSize = function () {
            return this.fileSize;
        };
    
        /**
         * Setter for FileSize
         * 
         * @param {string|null} value 
         */
        Upload.prototype.setFileSize = function (value) {
            this.fileSize = value;
        };
    
        /**
         * اندازه ی فایل
         *
         * @return {string}
         */
        Upload.prototype.getFileSizeValue = function () {
            return this.fileSizeValue;
        };
    
        /**
         * Setter for FileSizeValue
         * 
         * @param {string} value 
         */
        Upload.prototype.setFileSizeValue = function (value) {
            this.fileSizeValue = value;
        };
    
        /**
         * آدرس فایل
         *
         * @return {string}
         */
        Upload.prototype.getFileUrl = function () {
            return this.fileUrl;
        };
    
        /**
         * Setter for FileUrl
         * 
         * @param {string} value 
         */
        Upload.prototype.setFileUrl = function (value) {
            this.fileUrl = value;
        };
    
        /**
         * آدرس پیش نمایش فایل
         *
         * @return {string}
         */
        Upload.prototype.getFileThumbnailUrl = function () {
            return this.fileThumbnailUrl;
        };
    
        /**
         * Setter for FileThumbnailUrl
         * 
         * @param {string} value 
         */
        Upload.prototype.setFileThumbnailUrl = function (value) {
            this.fileThumbnailUrl = value;
        };
    
        /**
         * تاریخ انقضای شمسی
         *
         * @return {string}
         */
        Upload.prototype.getExpireOnPersianDate = function () {
            return this.expireOnPersianDate;
        };
    
        /**
         * Setter for ExpireOnPersianDate
         * 
         * @param {string} value 
         */
        Upload.prototype.setExpireOnPersianDate = function (value) {
            this.expireOnPersianDate = value;
        };
    
        /**
         * تاریخ بروز رسانی فایل
         *
         * @return {string}
         */
        Upload.prototype.getUpdateOn = function () {
            return this.updateOn;
        };
    
        /**
         * Setter for UpdateOn
         * 
         * @param {string} value 
         */
        Upload.prototype.setUpdateOn = function (value) {
            this.updateOn = value;
        };
    
        /**
         * تاریخ ثبت فایل
         *
         * @return {string}
         */
        Upload.prototype.getCreateOn = function () {
            return this.createOn;
        };
    
        /**
         * Setter for CreateOn
         * 
         * @param {string} value 
         */
        Upload.prototype.setCreateOn = function (value) {
            this.createOn = value;
        };
    
        /**
         * تاریخ ثبت فایل شمسی
         *
         * @return {string}
         */
        Upload.prototype.getCreateOnPersianDate = function () {
            return this.createOnPersianDate;
        };
    
        /**
         * Setter for CreateOnPersianDate
         * 
         * @param {string} value 
         */
        Upload.prototype.setCreateOnPersianDate = function (value) {
            this.createOnPersianDate = value;
        };
    
        /**
         * تاریخ بروز رسانی فایل شمسی
         *
         * @return {string}
         */
        Upload.prototype.getUpdateOnPersianDate = function () {
            return this.updateOnPersianDate;
        };
    
        /**
         * Setter for UpdateOnPersianDate
         * 
         * @param {string} value 
         */
        Upload.prototype.setUpdateOnPersianDate = function (value) {
            this.updateOnPersianDate = value;
        };
    
        /**
         * آدرس دایرکتوری فایل
         *
         * @return {string}
         */
        Upload.prototype.getFilePath = function () {
            return this.filePath;
        };
    
        /**
         * Setter for FilePath
         * 
         * @param {string} value 
         */
        Upload.prototype.setFilePath = function (value) {
            this.filePath = value;
        };
    
        return Upload;
    }

}(angular));
