/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of SpecialPlan
 *
 * @constructor
 */
angular.module('EasyBimehLandingLib')
    .factory('SpecialPlan', ['BaseModel', SpecialPlanModel]);

    function SpecialPlanModel(BaseModel) {
        var SpecialPlan = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.key = this.getValue(obj.key);
            this.count = this.getValue(obj.count);
            this.title = this.getValue(obj.title);
            this.policyType = this.getValue(obj.policyType);
            this.display = this.getValue(obj.display);
            this.iconPosition = this.getValue(obj.iconPosition);
        };

        SpecialPlan.prototype = new BaseModel();
        SpecialPlan.prototype.constructor = SpecialPlan;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        SpecialPlan.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'key', realName: 'key' },
                { name: 'count', realName: 'count' },
                { name: 'title', realName: 'title' },
                { name: 'policyType', realName: 'policyType' },
                { name: 'display', realName: 'display' },
                { name: 'iconPosition', realName: 'iconPosition' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        SpecialPlan.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int}
         */
        SpecialPlan.prototype.getKey = function () {
            return this.key;
        };
    
        /**
         * Setter for Key
         * 
         * @param {int} value 
         */
        SpecialPlan.prototype.setKey = function (value) {
            this.key = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int}
         */
        SpecialPlan.prototype.getCount = function () {
            return this.count;
        };
    
        /**
         * Setter for Count
         * 
         * @param {int} value 
         */
        SpecialPlan.prototype.setCount = function (value) {
            this.count = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        SpecialPlan.prototype.getTitle = function () {
            return this.title;
        };
    
        /**
         * Setter for Title
         * 
         * @param {string} value 
         */
        SpecialPlan.prototype.setTitle = function (value) {
            this.title = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int}
         */
        SpecialPlan.prototype.getPolicyType = function () {
            return this.policyType;
        };
    
        /**
         * Setter for PolicyType
         * 
         * @param {int} value 
         */
        SpecialPlan.prototype.setPolicyType = function (value) {
            this.policyType = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        SpecialPlan.prototype.getDisplay = function () {
            return this.display;
        };
    
        /**
         * Setter for Display
         * 
         * @param {string|null} value 
         */
        SpecialPlan.prototype.setDisplay = function (value) {
            this.display = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int}
         */
        SpecialPlan.prototype.getIconPosition = function () {
            return this.iconPosition;
        };
    
        /**
         * Setter for IconPosition
         * 
         * @param {int} value 
         */
        SpecialPlan.prototype.setIconPosition = function (value) {
            this.iconPosition = value;
        };
    
        return SpecialPlan;
    }

}(angular));
