/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of TravelInsurance
 *
 * @constructor
 */
angular.module('EasyBimehLandingLib')
    .factory('TravelInsurance', ['BaseModel', TravelInsuranceModel]);

    function TravelInsuranceModel(BaseModel) {
        var TravelInsurance = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.hasPlan = this.getValue(obj.hasPlan);
            this.isSamanInsurance = this.getValue(obj.isSamanInsurance);
            this.zones = this.getValue(obj.zones);
            this.travelDurations = this.getValue(obj.travelDurations);
            this.travelAges = this.getValue(obj.travelAges);
            this.provinces = this.getValue(obj.provinces);
            this.cities = this.getValue(obj.cities);
            this.cityRegions = this.getValue(obj.cityRegions);
            this.shippingTypes = this.getValue(obj.shippingTypes);
            this.postTypes = this.getValue(obj.postTypes);
            this.insuranceData = this.getValue(obj.insuranceData);
            this.insurancePolicyCondition = this.getValue(obj.insurancePolicyCondition);
        };

        TravelInsurance.prototype = new BaseModel();
        TravelInsurance.prototype.constructor = TravelInsurance;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        TravelInsurance.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'hasPlan', realName: 'hasPlan' },
                { name: 'isSamanInsurance', realName: 'isSamanInsurance' },
                { name: 'zones', realName: 'zones', array: true, type: 'Zone' },
                { name: 'travelDurations', realName: 'travelDurations', array: true, type: 'TravelDuration' },
                { name: 'travelAges', realName: 'travelAges', array: true, type: 'TravelAge' },
                { name: 'provinces', realName: 'provinces', array: true, type: 'Province' },
                { name: 'cities', realName: 'cities', array: true },
                { name: 'cityRegions', realName: 'cityRegions', array: true },
                { name: 'shippingTypes', realName: 'shippingTypes', array: true, type: 'ShippingType' },
                { name: 'postTypes', realName: 'postTypes', array: true, type: 'PostType' },
                { name: 'insuranceData', realName: 'insuranceData', type: 'InsuranceDataTravelInsurance' },
                {
                    name: 'insurancePolicyCondition',
                    realName: 'insurancePolicyCondition',
                    type: 'InsurancePolicyCondition',
                }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        TravelInsurance.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {bool}
         */
        TravelInsurance.prototype.getHasPlan = function () {
            return this.hasPlan;
        };
    
        /**
         * Setter for HasPlan
         * 
         * @param {bool} value 
         */
        TravelInsurance.prototype.setHasPlan = function (value) {
            this.hasPlan = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {bool}
         */
        TravelInsurance.prototype.getIsSamanInsurance = function () {
            return this.isSamanInsurance;
        };
    
        /**
         * Setter for IsSamanInsurance
         * 
         * @param {bool} value 
         */
        TravelInsurance.prototype.setIsSamanInsurance = function (value) {
            this.isSamanInsurance = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        TravelInsurance.prototype.getZones = function () {
            return this.zones;
        };
    
        /**
         * Setter for Zones
         * 
         * @param {array} value 
         */
        TravelInsurance.prototype.setZones = function (value) {
            this.zones = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        TravelInsurance.prototype.getTravelDurations = function () {
            return this.travelDurations;
        };
    
        /**
         * Setter for TravelDurations
         * 
         * @param {array} value 
         */
        TravelInsurance.prototype.setTravelDurations = function (value) {
            this.travelDurations = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        TravelInsurance.prototype.getTravelAges = function () {
            return this.travelAges;
        };
    
        /**
         * Setter for TravelAges
         * 
         * @param {array} value 
         */
        TravelInsurance.prototype.setTravelAges = function (value) {
            this.travelAges = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        TravelInsurance.prototype.getProvinces = function () {
            return this.provinces;
        };
    
        /**
         * Setter for Provinces
         * 
         * @param {array} value 
         */
        TravelInsurance.prototype.setProvinces = function (value) {
            this.provinces = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        TravelInsurance.prototype.getCities = function () {
            return this.cities;
        };
    
        /**
         * Setter for Cities
         * 
         * @param {array} value 
         */
        TravelInsurance.prototype.setCities = function (value) {
            this.cities = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        TravelInsurance.prototype.getCityRegions = function () {
            return this.cityRegions;
        };
    
        /**
         * Setter for CityRegions
         * 
         * @param {array} value 
         */
        TravelInsurance.prototype.setCityRegions = function (value) {
            this.cityRegions = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        TravelInsurance.prototype.getShippingTypes = function () {
            return this.shippingTypes;
        };
    
        /**
         * Setter for ShippingTypes
         * 
         * @param {array} value 
         */
        TravelInsurance.prototype.setShippingTypes = function (value) {
            this.shippingTypes = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        TravelInsurance.prototype.getPostTypes = function () {
            return this.postTypes;
        };
    
        /**
         * Setter for PostTypes
         * 
         * @param {array} value 
         */
        TravelInsurance.prototype.setPostTypes = function (value) {
            this.postTypes = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {InsuranceDataTravelInsurance}
         */
        TravelInsurance.prototype.getInsuranceData = function () {
            return this.insuranceData;
        };
    
        /**
         * Setter for InsuranceData
         * 
         * @param {InsuranceDataTravelInsurance} value 
         */
        TravelInsurance.prototype.setInsuranceData = function (value) {
            this.insuranceData = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {InsurancePolicyCondition}
         */
        TravelInsurance.prototype.getInsurancePolicyCondition = function () {
            return this.insurancePolicyCondition;
        };
    
        /**
         * Setter for InsurancePolicyCondition
         * 
         * @param {InsurancePolicyCondition} value 
         */
        TravelInsurance.prototype.setInsurancePolicyCondition = function (value) {
            this.insurancePolicyCondition = value;
        };
    
        return TravelInsurance;
    }

}(angular));
