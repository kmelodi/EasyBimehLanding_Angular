/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of DeviceBrandTypes
 *
 * @constructor
 */
angular.module('EasyBimehLandingLib')
    .factory('DeviceBrandTypes', ['BaseModel', DeviceBrandTypesModel]);

    function DeviceBrandTypesModel(BaseModel) {
        var DeviceBrandTypes = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.id = this.getValue(obj.id);
            this.title = this.getValue(obj.title);
            this.deviceGroup = this.getValue(obj.deviceGroup);
            this.deviceTypeId = this.getValue(obj.deviceTypeId);
            this.deviceBrandId = this.getValue(obj.deviceBrandId);
            this.createOn = this.getValue(obj.createOn);
            this.updateOn = this.getValue(obj.updateOn);
            this.createdBy = this.getValue(obj.createdBy);
            this.updatedBy = this.getValue(obj.updatedBy);
            this.createOnPersianDate = this.getValue(obj.createOnPersianDate);
            this.updateOnPersianDate = this.getValue(obj.updateOnPersianDate);
            this.deviceTypeTitle = this.getValue(obj.deviceTypeTitle);
            this.deviceBrandTitle = this.getValue(obj.deviceBrandTitle);
            this.deviceTypeBrandModelTitle = this.getValue(obj.deviceTypeBrandModelTitle);
            this.deviceBrandIds = this.getValue(obj.deviceBrandIds);
            this.deviceBrandsTitle = this.getValue(obj.deviceBrandsTitle);
        };

        DeviceBrandTypes.prototype = new BaseModel();
        DeviceBrandTypes.prototype.constructor = DeviceBrandTypes;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        DeviceBrandTypes.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'id', realName: 'id' },
                { name: 'title', realName: 'title' },
                { name: 'deviceGroup', realName: 'deviceGroup' },
                { name: 'deviceTypeId', realName: 'deviceTypeId' },
                { name: 'deviceBrandId', realName: 'deviceBrandId' },
                { name: 'createOn', realName: 'createOn' },
                { name: 'updateOn', realName: 'updateOn' },
                { name: 'createdBy', realName: 'createdBy' },
                { name: 'updatedBy', realName: 'updatedBy' },
                { name: 'createOnPersianDate', realName: 'createOnPersianDate' },
                { name: 'updateOnPersianDate', realName: 'updateOnPersianDate' },
                { name: 'deviceTypeTitle', realName: 'deviceTypeTitle' },
                { name: 'deviceBrandTitle', realName: 'deviceBrandTitle' },
                { name: 'deviceTypeBrandModelTitle', realName: 'deviceTypeBrandModelTitle' },
                { name: 'deviceBrandIds', realName: 'deviceBrandIds', array: true },
                { name: 'deviceBrandsTitle', realName: 'deviceBrandsTitle' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        DeviceBrandTypes.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int}
         */
        DeviceBrandTypes.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {int} value 
         */
        DeviceBrandTypes.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        DeviceBrandTypes.prototype.getTitle = function () {
            return this.title;
        };
    
        /**
         * Setter for Title
         * 
         * @param {string} value 
         */
        DeviceBrandTypes.prototype.setTitle = function (value) {
            this.title = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int}
         */
        DeviceBrandTypes.prototype.getDeviceGroup = function () {
            return this.deviceGroup;
        };
    
        /**
         * Setter for DeviceGroup
         * 
         * @param {int} value 
         */
        DeviceBrandTypes.prototype.setDeviceGroup = function (value) {
            this.deviceGroup = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        DeviceBrandTypes.prototype.getDeviceTypeId = function () {
            return this.deviceTypeId;
        };
    
        /**
         * Setter for DeviceTypeId
         * 
         * @param {int|null} value 
         */
        DeviceBrandTypes.prototype.setDeviceTypeId = function (value) {
            this.deviceTypeId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        DeviceBrandTypes.prototype.getDeviceBrandId = function () {
            return this.deviceBrandId;
        };
    
        /**
         * Setter for DeviceBrandId
         * 
         * @param {string|null} value 
         */
        DeviceBrandTypes.prototype.setDeviceBrandId = function (value) {
            this.deviceBrandId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        DeviceBrandTypes.prototype.getCreateOn = function () {
            return this.createOn;
        };
    
        /**
         * Setter for CreateOn
         * 
         * @param {string} value 
         */
        DeviceBrandTypes.prototype.setCreateOn = function (value) {
            this.createOn = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        DeviceBrandTypes.prototype.getUpdateOn = function () {
            return this.updateOn;
        };
    
        /**
         * Setter for UpdateOn
         * 
         * @param {string} value 
         */
        DeviceBrandTypes.prototype.setUpdateOn = function (value) {
            this.updateOn = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        DeviceBrandTypes.prototype.getCreatedBy = function () {
            return this.createdBy;
        };
    
        /**
         * Setter for CreatedBy
         * 
         * @param {string} value 
         */
        DeviceBrandTypes.prototype.setCreatedBy = function (value) {
            this.createdBy = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        DeviceBrandTypes.prototype.getUpdatedBy = function () {
            return this.updatedBy;
        };
    
        /**
         * Setter for UpdatedBy
         * 
         * @param {string|null} value 
         */
        DeviceBrandTypes.prototype.setUpdatedBy = function (value) {
            this.updatedBy = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        DeviceBrandTypes.prototype.getCreateOnPersianDate = function () {
            return this.createOnPersianDate;
        };
    
        /**
         * Setter for CreateOnPersianDate
         * 
         * @param {string} value 
         */
        DeviceBrandTypes.prototype.setCreateOnPersianDate = function (value) {
            this.createOnPersianDate = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        DeviceBrandTypes.prototype.getUpdateOnPersianDate = function () {
            return this.updateOnPersianDate;
        };
    
        /**
         * Setter for UpdateOnPersianDate
         * 
         * @param {string} value 
         */
        DeviceBrandTypes.prototype.setUpdateOnPersianDate = function (value) {
            this.updateOnPersianDate = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        DeviceBrandTypes.prototype.getDeviceTypeTitle = function () {
            return this.deviceTypeTitle;
        };
    
        /**
         * Setter for DeviceTypeTitle
         * 
         * @param {string|null} value 
         */
        DeviceBrandTypes.prototype.setDeviceTypeTitle = function (value) {
            this.deviceTypeTitle = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        DeviceBrandTypes.prototype.getDeviceBrandTitle = function () {
            return this.deviceBrandTitle;
        };
    
        /**
         * Setter for DeviceBrandTitle
         * 
         * @param {string|null} value 
         */
        DeviceBrandTypes.prototype.setDeviceBrandTitle = function (value) {
            this.deviceBrandTitle = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        DeviceBrandTypes.prototype.getDeviceTypeBrandModelTitle = function () {
            return this.deviceTypeBrandModelTitle;
        };
    
        /**
         * Setter for DeviceTypeBrandModelTitle
         * 
         * @param {string} value 
         */
        DeviceBrandTypes.prototype.setDeviceTypeBrandModelTitle = function (value) {
            this.deviceTypeBrandModelTitle = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        DeviceBrandTypes.prototype.getDeviceBrandIds = function () {
            return this.deviceBrandIds;
        };
    
        /**
         * Setter for DeviceBrandIds
         * 
         * @param {array} value 
         */
        DeviceBrandTypes.prototype.setDeviceBrandIds = function (value) {
            this.deviceBrandIds = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        DeviceBrandTypes.prototype.getDeviceBrandsTitle = function () {
            return this.deviceBrandsTitle;
        };
    
        /**
         * Setter for DeviceBrandsTitle
         * 
         * @param {string|null} value 
         */
        DeviceBrandTypes.prototype.setDeviceBrandsTitle = function (value) {
            this.deviceBrandsTitle = value;
        };
    
        return DeviceBrandTypes;
    }

}(angular));
