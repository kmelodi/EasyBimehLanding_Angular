/**
 * EasyBimehLandingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of TargetSite
 *
 * @constructor
 */
angular.module('EasyBimehLandingLib')
    .factory('TargetSite', ['BaseModel', TargetSiteModel]);

    function TargetSiteModel(BaseModel) {
        var TargetSite = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.name = this.getValue(obj.name);
            this.assemblyName = this.getValue(obj.assemblyName);
            this.className = this.getValue(obj.className);
            this.signature = this.getValue(obj.signature);
            this.signature2 = this.getValue(obj.signature2);
            this.memberType = this.getValue(obj.memberType);
            this.genericArguments = this.getValue(obj.genericArguments);
        };

        TargetSite.prototype = new BaseModel();
        TargetSite.prototype.constructor = TargetSite;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        TargetSite.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'name', realName: 'Name' },
                { name: 'assemblyName', realName: 'AssemblyName' },
                { name: 'className', realName: 'ClassName' },
                { name: 'signature', realName: 'Signature' },
                { name: 'signature2', realName: 'Signature2' },
                { name: 'memberType', realName: 'MemberType' },
                { name: 'genericArguments', realName: 'GenericArguments' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        TargetSite.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        TargetSite.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string} value 
         */
        TargetSite.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        TargetSite.prototype.getAssemblyName = function () {
            return this.assemblyName;
        };
    
        /**
         * Setter for AssemblyName
         * 
         * @param {string} value 
         */
        TargetSite.prototype.setAssemblyName = function (value) {
            this.assemblyName = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        TargetSite.prototype.getClassName = function () {
            return this.className;
        };
    
        /**
         * Setter for ClassName
         * 
         * @param {string} value 
         */
        TargetSite.prototype.setClassName = function (value) {
            this.className = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        TargetSite.prototype.getSignature = function () {
            return this.signature;
        };
    
        /**
         * Setter for Signature
         * 
         * @param {string} value 
         */
        TargetSite.prototype.setSignature = function (value) {
            this.signature = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        TargetSite.prototype.getSignature2 = function () {
            return this.signature2;
        };
    
        /**
         * Setter for Signature2
         * 
         * @param {string} value 
         */
        TargetSite.prototype.setSignature2 = function (value) {
            this.signature2 = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int}
         */
        TargetSite.prototype.getMemberType = function () {
            return this.memberType;
        };
    
        /**
         * Setter for MemberType
         * 
         * @param {int} value 
         */
        TargetSite.prototype.setMemberType = function (value) {
            this.memberType = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        TargetSite.prototype.getGenericArguments = function () {
            return this.genericArguments;
        };
    
        /**
         * Setter for GenericArguments
         * 
         * @param {string|null} value 
         */
        TargetSite.prototype.setGenericArguments = function (value) {
            this.genericArguments = value;
        };
    
        return TargetSite;
    }

}(angular));
